const { pool } = require("../config/database");

// T√≠nh to√°n tr·∫°ng th√°i d·ª±a tr√™n ng√†y th√°ng
const calculateStatus = (issued_date, effective_date, expiry_date) => {
  const today = new Date();
  today.setHours(0, 0, 0, 0); // Reset time to start of day

  // N·∫øu kh√¥ng c√≥ ng√†y c√≥ hi·ªáu l·ª±c v√† ng√†y h·∫øt hi·ªáu l·ª±c
  if (!effective_date && !expiry_date) {
    return "chua_xac_dinh";
  }

  // N·∫øu kh√¥ng c√≥ ng√†y c√≥ hi·ªáu l·ª±c
  if (!effective_date) {
    return "chua_xac_dinh";
  }

  const effectiveDate = new Date(effective_date);
  effectiveDate.setHours(0, 0, 0, 0);

  // N·∫øu ch∆∞a ƒë·∫øn ng√†y c√≥ hi·ªáu l·ª±c
  if (today < effectiveDate) {
    return "chua_hieu_luc";
  }

  // N·∫øu c√≥ ng√†y h·∫øt hi·ªáu l·ª±c
  if (expiry_date) {
    const expiryDate = new Date(expiry_date);
    expiryDate.setHours(0, 0, 0, 0);

    // N·∫øu ƒë√£ qua ng√†y h·∫øt hi·ªáu l·ª±c
    if (today > expiryDate) {
      return "het_hieu_luc";
    }
  }

  // N·∫øu ƒëang trong kho·∫£ng th·ªùi gian c√≥ hi·ªáu l·ª±c
  return "co_hieu_luc";
};

const updateLegalDocumentsStatus = async () => {
  try {
    console.log("üîß C·∫≠p nh·∫≠t tr·∫°ng th√°i cho t·∫•t c·∫£ vƒÉn b·∫£n ph√°p lu·∫≠t...");

    const client = await pool.connect();

    // L·∫•y t·∫•t c·∫£ vƒÉn b·∫£n ph√°p lu·∫≠t
    const result = await client.query(`
      SELECT id, issued_date, effective_date, expiry_date, status
      FROM legal_documents 
      WHERE is_active = true
    `);

    console.log(`üìä T√¨m th·∫•y ${result.rows.length} vƒÉn b·∫£n ph√°p lu·∫≠t`);

    let updatedCount = 0;
    let unchangedCount = 0;

    for (const doc of result.rows) {
      const newStatus = calculateStatus(
        doc.issued_date,
        doc.effective_date,
        doc.expiry_date
      );

      if (newStatus !== doc.status) {
        await client.query(
          `UPDATE legal_documents SET status = $1, ts_update = CURRENT_TIMESTAMP WHERE id = $2`,
          [newStatus, doc.id]
        );
        console.log(
          `‚úÖ C·∫≠p nh·∫≠t vƒÉn b·∫£n ID ${doc.id}: ${doc.status} ‚Üí ${newStatus}`
        );
        updatedCount++;
      } else {
        console.log(
          `‚è≠Ô∏è VƒÉn b·∫£n ID ${doc.id}: gi·ªØ nguy√™n tr·∫°ng th√°i ${doc.status}`
        );
        unchangedCount++;
      }
    }

    console.log("\nüìà K·∫øt qu·∫£ c·∫≠p nh·∫≠t:");
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t: ${updatedCount} vƒÉn b·∫£n`);
    console.log(`‚è≠Ô∏è Kh√¥ng thay ƒë·ªïi: ${unchangedCount} vƒÉn b·∫£n`);
    console.log(`üìä T·ªïng c·ªông: ${result.rows.length} vƒÉn b·∫£n`);

    // Hi·ªÉn th·ªã th·ªëng k√™ tr·∫°ng th√°i
    const statusStats = await client.query(`
      SELECT status, COUNT(*) as count
      FROM legal_documents 
      WHERE is_active = true
      GROUP BY status
      ORDER BY count DESC
    `);

    console.log("\nüìä Th·ªëng k√™ tr·∫°ng th√°i hi·ªán t·∫°i:");
    statusStats.rows.forEach((stat) => {
      const statusLabel =
        {
          chua_hieu_luc: "Ch∆∞a hi·ªáu l·ª±c",
          co_hieu_luc: "C√≥ hi·ªáu l·ª±c",
          het_hieu_luc: "H·∫øt hi·ªáu l·ª±c",
          chua_xac_dinh: "Ch∆∞a x√°c ƒë·ªãnh",
        }[stat.status] || stat.status;

      console.log(`  ${statusLabel}: ${stat.count} vƒÉn b·∫£n`);
    });

    client.release();
    console.log("\nüéâ Ho√†n th√†nh c·∫≠p nh·∫≠t tr·∫°ng th√°i vƒÉn b·∫£n ph√°p lu·∫≠t!");
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    process.exit(1);
  }
};

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  updateLegalDocumentsStatus()
    .then(() => {
      console.log("‚úÖ Script ho√†n th√†nh!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Script th·∫•t b·∫°i:", error);
      process.exit(1);
    });
}

module.exports = { updateLegalDocumentsStatus, calculateStatus };
